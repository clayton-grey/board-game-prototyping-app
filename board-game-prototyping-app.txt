

===== ./README.md =====

# Board Game Prototyping App

## Overview
An interactive board game prototyping environment that allows multiple users to collaborate in real time. Users can connect to a shared session and interact with a full-screen canvas containing various virtual board game elements.

## Features
- **Real-time collaboration** via WebSockets
- **Scrollable & Zoomable Canvas**
- **User authentication** with JWT
- **Admin panel** for user and project management
- **Project versioning and session persistence**
- **Secure database connection** using PostgreSQL

## Installation

### Prerequisites
- Docker & Docker Compose

### Steps
1. Clone the repository:
   ```sh
   git clone https://github.com/your-repo/board-game-prototyping-app.git
   cd board-game-prototyping-app
   ```
2. Create an `.env` file:
   ```sh
   cp .env.example .env
   ```
3. Start the application with Docker:
   ```sh
   docker-compose up --build
   ```

## Folder Structure
```
board-game-prototyping-app/
├── server/
│   ├── index.js                # Main server file
│   ├── database.js             # PostgreSQL database connection
│   ├── sessionManager.js       # Manages session persistence
│   ├── routes/
│   │   ├── auth.js             # Authentication routes
│   │   ├── projects.js         # Project CRUD & versioning
│   │   ├── admin.js            # Admin controls
│   │   └── collaboration.js    # (Optional) HTTP routes for collaboration
│   ├── ws/
│   │   └── collaboration.js    # WebSocket event handling
│   └── config.js               # Environment variables
│
├── client/
│   ├── index.html              # Base HTML structure
│   ├── js/
│   │   ├── app.js              # Main frontend logic
│   │   ├── canvas.js           # Handles game elements
│   │   ├── session.js          # WebSockets & session state
│   ├── css/
│   │   ├── style.css           # Styling for the UI
├── db-init-scripts/            # NEW: Database initialization folder
│   ├── init.sql                # SQL script to create tables│
├── .env                        # Environment variables
├── docker-compose.yml          # Docker Compose configuration
├── Dockerfile                  # Server Dockerfile
├── package.json                # Node dependencies
└── README.md                   # Project documentation
```

## License
This project is licensed under the MIT License.


===== ./package-lock.json =====

{
  "name": "board-game-prototyping-app",
  "version": "0.0.1",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "board-game-prototyping-app",
      "version": "0.0.1",
      "license": "MIT",
      "dependencies": {
        "bcryptjs": "^3.0.2",
        "cors": "^2.8.5",
        "dotenv": "^16.0.3",
        "express": "^4.21.2",
        "jsonwebtoken": "^9.0.0",
        "pg": "^8.10.0",
        "ws": "^8.11.0"
      },
      "devDependencies": {
        "nodemon": "^3.0.1"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/bcryptjs": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz",
      "integrity": "sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==",
      "license": "BSD-3-Clause",
      "bin": {
        "bcrypt": "bin/bcrypt"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.3.tgz",
      "integrity": "sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.7.tgz",
      "integrity": "sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.0",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.9.tgz",
      "integrity": "sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/pg": {
      "version": "8.13.3",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.13.3.tgz",
      "integrity": "sha512-P6tPt9jXbL9HVu/SSRERNYaYG++MjnscnegFh9pPHihfoBSujsrka0hyuymMzeJKFWrcG8wvCKy8rCe8e5nDUQ==",
      "license": "MIT",
      "dependencies": {
        "pg-connection-string": "^2.7.0",
        "pg-pool": "^3.7.1",
        "pg-protocol": "^1.7.1",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "optionalDependencies": {
        "pg-cloudflare": "^1.1.1"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-cloudflare": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/pg-connection-string": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.7.0.tgz",
      "integrity": "sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA==",
      "license": "MIT"
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "license": "ISC",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.7.1",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.7.1.tgz",
      "integrity": "sha512-xIOsFoh7Vdhojas6q3596mXFsR8nwBQBXX5JiV7p9buEVAGqYL4yFzclON5P9vFrpu1u7Zwl2oriyDa89n0wbw==",
      "license": "MIT",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.7.1",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.7.1.tgz",
      "integrity": "sha512-gjTHWGYWsEgy9MsY0Gp6ZJxV24IjDqdpTW7Eh0x+WfJLFsm/TJx1MzL6T0D88mBvkpxotCQ6TwW6N+Kko7lhgQ==",
      "license": "MIT"
    },
    "node_modules/pg/node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "license": "MIT",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pg/node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pg/node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pg/node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pg/node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "license": "MIT",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "license": "MIT",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/split2": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
      "license": "ISC",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    }
  }
}


===== ./package.json =====

{
  "name": "board-game-prototyping-app",
  "version": "0.0.1",
  "type": "module",
  "description": "An interactive board game prototyping environment",
  "main": "server/index.js",
  "scripts": {
    "start": "node server/index.js",
    "dev": "nodemon server/index.js"
  },
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.0",
    "pg": "^8.10.0",
    "ws": "^8.11.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": ">=16"
  },
  "license": "MIT"
}


===== ./.env =====

PORT=3000
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgrespassword
DB_NAME=board_game_prototyping
DB_USER=admin
DB_PASSWORD=test1234
DB_HOST=db
DB_PORT=5432
DB_SSL=false
JWT_SECRET=your_jwt_secret
NODE_ENV=development


===== ./docker-compose.yml =====

version: "3.8"

services:
  app:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    command: npm run dev

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_DB: board_game_prototyping
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

  db-init:
    image: postgres:latest
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db-init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_DB: board_game_prototyping
    entrypoint: >
      sh -c "PGPASSWORD=postgrespassword psql -h db -U postgres -d board_game_prototyping -f /docker-entrypoint-initdb.d/init.sql"

volumes:
  pg_data: {}


===== ./board_game_prototyping.md =====


# Interactive Board Game Prototyping Environment Specification

## Purpose

This project aims to create an interactive board game prototyping environment that allows multiple users to collaborate in real time. Users will be able to connect to a shared session and interact with a full-screen canvas containing various virtual board game elements. The initial focus is to provide a flexible and interactive space for game design and testing, with potential future extensions to support game logic.

---

## Core Features

### Security

- All text input fields must have security precautions to prevent injection attacks.
- User authentication and data storage must adhere to industry-standard security practices.

### Canvas & User Interaction

- **Scrollable & Zoomable Canvas**:
  - The canvas has a fixed center point and supports zooming.
  - Minimum and maximum zoom levels should be configurable.
  - Clicking and dragging the canvas should move the viewport.
  - Zooming should center on the mouse cursor unless initiated from the UI, which centers on the current visual center.

- **Live Collaboration**:
  - Users in the same session should see a labeled and color-coded icon representing each connected user.
  - The cursor positions of connected users should update in real time.
  - Any movement or modification of elements should propagate instantly to all users.
  - Selection of elements should be unique, meaning each user can only select one element at a time.

- **Floating UI Elements**:
  - UI elements do not scale with canvas zoom.
  - A floating zoom control UI (bottom-right corner with configurable padding) should include:
    - A zoom percentage display (clickable for manual input).
    - Zoom in/out buttons (+/-) in 25% increments.
    - A button to frame all selected elements with a configurable padding.

- **Tooltips & Tutorials**:
  - The system should support tooltips and tutorials for better usability.

### User Management

- **User Accounts**:
  - Users can register with an email and password.
  - Passwords must be securely stored.
  - User preferences (e.g., hotkey settings) should be saved.
  - Users can customize hotkeys.

- **Admin Features**:
  - An admin panel should allow user management (updating user information and permissions).
  - The admin panel should provide analytics including:
    - Active session counts over time.
    - Total sessions created.
    - Per-user session and project statistics.
  - The admin panel should support exporting and importing projects.
  - Importing a project should make it the active version of a project by name.
  - Admin users should have the ability to roll back a project to previous saved versions.
  - If an admin rolls back a project to a previous version that is no longer available, users should be pushed to a new session and notified via a message. If the project is updated to a new version, users will receive a pop-up notification but can continue their session until they reload.
  - Admin users should be able to delete projects.
  - Deleting a project should prevent users from opening any session that uses it. Users attempting to access a session associated with a deleted project should be presented with a popover notification and redirected to a new session using the most recent project version.
  - When a session becomes invalid due to project deletion, all related session data, including expired image assets, should be removed as part of the project update and deletion processes.
  - Admins should have the ability to manually force the end of older sessions if necessary.

### Project & Session Management

- **Session Activity Tracking**:
  - Each session should have an activity queue to enable multi-step undo/redo.
  - Undo/redo controls should be available as floating UI elements.
  - All project changes to elements should be undoable.
  - The undo queue should store 40 steps per session.
  - Undo steps are session-specific and must track all user actions in order.
  - If a user disconnects and reconnects, their undo/redo history should be restored if possible.

- **Session Persistence & Project Versioning**:
  - Sessions should persist and have a unique, human-readable code (e.g., "SilverPeregrinFolly").
  - Sessions should be explicitly tied to a project version.
  - If a session is using an older version of a project, a popover should notify users that they are working with an outdated version, providing an option to update or continue with the existing version.
  - Sessions can be reset back to the last saved project state with a confirmation step.
  - Only changes from the original project version should be tracked until they are saved.
  - Session data should be efficiently managed, tracking only moved, flipped, or modified elements to minimize storage needs.
  - If a session expires due to inactivity, it should persist until manually ended by an admin if necessary.

- **Project Ownership & Permissions**:
  - Users can create, edit, and delete projects.
  - A project owner can assign permissions to other users.
  - Only the owner or admin can delete a project.
  - Only authorized users can save changes.

- **Project Loading & Saving**:
  - The site should support opening an existing project or creating a new one.
  - A default project can be configured.
  - A project has a **"saved"** state, with changes tracked in the session.
  - The project should have a version number that auto-increments on save.
  - A full copy of each previous version should be stored for restoration.
  - The admin interface should support exporting and importing projects, including all image assets.
  - Image assets should persist with the oldest available project version unless explicitly deleted.

### Image & Asset Storage

- Images should be stored at full resolution but optimized for efficient retrieval.
- When an image is removed from a project, it should persist only as long as it exists in at least one active version.
- The system should avoid redundant storage by linking assets to the oldest necessary version of a project.

---

## Real-Time Synchronization

- **Technology Considerations**:
  - The platform should use a market-preferred real-time technology (e.g., WebSockets) but can explore options based on trade-offs.
  - The latency for interactions like moving elements and cursor location should be minimized.
  - Some interactions can resolve client-side after receiving server confirmation.
  - The session host (player who starts the session) should act as the source of truth in case of conflicts.
  - PostgreSQL should be used for persistent storage.


===== ./server/database.js =====

// server/database.js
import pkg from 'pg';
const { Pool } = pkg;
import config from './config.js';

const pool = new Pool({
  user: config.DB_USER,
  host: config.DB_HOST,
  database: config.DB_NAME,
  password: config.DB_PASSWORD,
  port: config.DB_PORT,
  ssl: config.DB_SSL ? { rejectUnauthorized: false } : false,
});

export const connectDB = async () => {
  try {
    await pool.query('SELECT 1');
    console.log('Connected to PostgreSQL database');
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

export default pool;


===== ./server/index.js =====

// server/index.js
import express from 'express';
import cors from 'cors';
import http from 'http';
import path from 'path';
import { fileURLToPath } from 'url';
import { WebSocketServer } from 'ws';

import authRoutes from './routes/auth.js';
import projectRoutes from './routes/projects.js';
import { handleWebSocketConnection } from './ws/collaboration.js';
import config from './config.js';

const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

// Basic Setup
app.use(express.json());
app.use(cors({ origin: '*' }));

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Serve static frontend files from `/client`
app.use(express.static(path.join(__dirname, '../client')));

// (Optional) Provide a `/shared` folder if needed
app.use('/shared', express.static(path.join(__dirname, '../shared')));

// API Routes
app.use('/auth', authRoutes);
app.use('/projects', projectRoutes);

// Serve index.html for root
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/index.html'));
});

// WebSocket handling
wss.on('connection', (ws) => handleWebSocketConnection(ws, wss));

// Global error handler (must come last)
app.use((err, req, res, next) => {
  console.error('Global Error Handler:', err.stack || err);
  const status = err.statusCode || 500;
  const msg = err.message || 'Server Error';
  res.status(status).json({ message: msg });
});

// Start server
server.listen(config.PORT, () => {
  console.log(`Server running on port ${config.PORT}`);
});


===== ./server/config.js =====

// server/config.js
import dotenv from 'dotenv';

// Load environment variables once
dotenv.config();

const config = {
  PORT: process.env.PORT || 3000,
  DB_USER: process.env.DB_USER,
  DB_HOST: process.env.DB_HOST,
  DB_NAME: process.env.DB_NAME,
  DB_PASSWORD: process.env.DB_PASSWORD,
  DB_PORT: process.env.DB_PORT,
  DB_SSL: process.env.DB_SSL === 'true',
  JWT_SECRET: process.env.JWT_SECRET,
  NODE_ENV: process.env.NODE_ENV || 'development',
};

export default config;


===== ./server/middleware/authMiddleware.js =====

// server/middleware/authMiddleware.js
import { AuthService } from '../services/AuthService.js';
import config from '../config.js';

export const authenticateToken = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(401).json({ message: "Unauthorized: No token provided" });
  }

  try {
    const user = AuthService.verifyToken(token); 
    // If verify succeeds, user is the decoded payload
    req.user = user;
    next();
  } catch (err) {
    return res.status(403).json({ message: "Forbidden: Invalid token" });
  }
};

export const authorizeAdmin = (req, res, next) => {
  // Simple admin check
  if (req.user && req.user.role === "admin") {
    return next();
  }
  return res.status(403).json({ message: "Access denied. Admins only." });
};


===== ./server/utils/asyncHandler.js =====

// server/utils/asyncHandler.js

/**
 * A higher-order function to wrap async route handlers, 
 * automatically passing errors to next() for the global error handler.
 */

export function asyncHandler(fn) {
  return function (req, res, next) {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
}


===== ./server/utils/HttpError.js =====

// server/utils/HttpError.js

export class HttpError extends Error {
  constructor(message, statusCode = 500) {
    super(message);
    this.statusCode = statusCode;
    // Maintain proper stack trace (V8 only)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
}


===== ./server/routes/auth.js =====

// server/routes/auth.js
import express from 'express';
import { asyncHandler } from '../utils/asyncHandler.js';
import { HttpError } from '../utils/HttpError.js';
import { UserService } from '../services/UserService.js';
import { AuthService } from '../services/AuthService.js';

const router = express.Router();

/**
 * POST /auth/register
 * Body: { name, email, password, confirmPassword }
 */
router.post('/register', asyncHandler(async (req, res) => {
  const { name, email, password, confirmPassword } = req.body;

  if (!name || !email || !password || !confirmPassword) {
    throw new HttpError('All fields are required.', 400);
  }
  if (password !== confirmPassword) {
    throw new HttpError('Passwords do not match.', 400);
  }

  // createUser() will throw HttpError if email is taken
  const user = await UserService.createUser(name, email, password);

  const payload = AuthService.userPayload(user);
  const token = AuthService.createToken(payload, '1h'); 

  return res.status(201).json({
    message: 'User registered successfully',
    user,
    token,
  });
}));

/**
 * POST /auth/login
 * Body: { email, password }
 */
router.post('/login', asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const user = await UserService.getByEmail(email);
  if (!user) {
    throw new HttpError('Invalid credentials.', 401);
  }

  const isMatch = await UserService.comparePasswords(password, user.password);
  if (!isMatch) {
    throw new HttpError('Invalid credentials.', 401);
  }

  // Build & sign JWT
  const payload = AuthService.userPayload(user);
  const token = AuthService.createToken(payload, '1h');

  return res.json({
    message: 'Logged in successfully',
    user: {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
    },
    token,
  });
}));

export default router;


===== ./server/routes/projects.js =====

// server/routes/projects.js
import express from "express";
import { authenticateToken } from "../middleware/authMiddleware.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { HttpError } from "../utils/HttpError.js";
import { ProjectService } from "../services/ProjectService.js";

const router = express.Router();

/**
 * GET /projects/ensureDefault
 * Creates a default project for the current user if none exist
 */
router.get("/ensureDefault", authenticateToken, asyncHandler(async (req, res) => {
  const project = await ProjectService.createDefaultProjectIfNone(req.user.id);
  return res.json(project);
}));

/**
 * POST /projects
 * Body: { name, description }
 */
router.post("/", authenticateToken, asyncHandler(async (req, res) => {
  const { name, description } = req.body;
  if (!req.user || !req.user.id) {
    throw new HttpError("User ID is missing from request", 400);
  }
  const project = await ProjectService.createProject(req.user.id, name, description);
  return res.status(201).json(project);
}));

/**
 * GET /projects
 * Return all projects owned by the user
 */
router.get("/", authenticateToken, asyncHandler(async (req, res) => {
  const projects = await ProjectService.getProjectsByOwner(req.user.id);
  return res.json(projects);
}));

/**
 * PUT /projects/:id
 */
router.put("/:id", authenticateToken, asyncHandler(async (req, res) => {
  const { id } = req.params;
  let { name, description } = req.body;
  if (!description) description = "";

  const canEdit = await ProjectService.userCanEditProject(id, req.user);
  if (!canEdit) {
    throw new HttpError("Not authorized or project not found.", 403);
  }

  const updated = await ProjectService.updateProject(id, name, description);
  if (!updated) {
    throw new HttpError("Project not found", 404);
  }
  return res.json(updated);
}));

/**
 * DELETE /projects/:id
 */
router.delete("/:id", authenticateToken, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const canEdit = await ProjectService.userCanEditProject(id, req.user);
  if (!canEdit) {
    throw new HttpError("Not authorized or project not found.", 403);
  }

  const deleted = await ProjectService.deleteProject(id);
  if (!deleted) {
    throw new HttpError("Project not found", 404);
  }
  return res.json({ message: "Project deleted" });
}));

/**
 * GET /projects/:id/versions
 */
router.get("/:id/versions", authenticateToken, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const canEdit = await ProjectService.userCanEditProject(id, req.user);
  if (!canEdit) {
    throw new HttpError("Not authorized or project not found.", 403);
  }
  const versions = await ProjectService.listVersions(id);
  return res.json(versions);
}));

/**
 * POST /projects/:id/versions
 * Body: { project_data }
 */
router.post("/:id/versions", authenticateToken, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const { project_data } = req.body || {};

  const canEdit = await ProjectService.userCanEditProject(id, req.user);
  if (!canEdit) {
    throw new HttpError("Not authorized or project not found.", 403);
  }
  const newVersion = await ProjectService.createVersion(id, project_data);
  return res.status(201).json(newVersion);
}));

/**
 * POST /projects/:id/versions/:versionId/rollback
 */
router.post("/:id/versions/:versionId/rollback", authenticateToken, asyncHandler(async (req, res) => {
  const { id, versionId } = req.params;
  const canEdit = await ProjectService.userCanEditProject(id, req.user);
  if (!canEdit) {
    throw new HttpError("Not authorized or project not found.", 403);
  }

  const result = await ProjectService.rollbackVersion(id, versionId);
  return res.json(result);
}));

export default router;


===== ./server/routes/admin.js =====

// server/routes/admin.js
import express from 'express';
import { authenticateToken, authorizeAdmin } from '../middleware/authMiddleware.js';
import { asyncHandler } from '../utils/asyncHandler.js';
import { HttpError } from '../utils/HttpError.js';
import { UserService } from '../services/UserService.js';

const router = express.Router();

// GET /admin/users
router.get('/users', authenticateToken, authorizeAdmin, asyncHandler(async (req, res) => {
  const users = await UserService.listAll();
  return res.json(users);
}));

// PUT /admin/users/:id/role
router.put('/users/:id/role', authenticateToken, authorizeAdmin, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;

  const updated = await UserService.updateRole(id, role);
  if (!updated) {
    throw new HttpError('User not found', 404);
  }
  return res.json(updated);
}));

// DELETE /admin/users/:id
router.delete('/users/:id', authenticateToken, authorizeAdmin, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const deleted = await UserService.deleteUser(id);
  if (!deleted) {
    throw new HttpError('User not found', 404);
  }
  return res.json({ message: 'User deleted' });
}));

export default router;


===== ./server/services/UserService.js =====

// server/services/UserService.js

import pool from '../database.js';
import bcrypt from 'bcryptjs';
import { HttpError } from '../utils/HttpError.js';

export class UserService {
  /**
   * Return user row or null if not found.
   */
  static async getByEmail(email) {
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    if (result.rows.length === 0) return null;
    return result.rows[0];
  }

  /**
   * Hash the password and insert a new user row.
   * Throw HttpError if email is already in use.
   */
  static async createUser(name, email, plainPassword) {
    // Check if user already exists
    const existing = await this.getByEmail(email);
    if (existing) {
      throw new HttpError('Email is already in use.', 400);
    }

    const hashedPassword = await bcrypt.hash(plainPassword, 10);

    const result = await pool.query(
      'INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id, name, email, role',
      [name, email, hashedPassword]
    );
    return result.rows[0]; // newly created user
  }

  /**
   * Compare plain text with hashed password.
   */
  static async comparePasswords(plainText, hashed) {
    return bcrypt.compare(plainText, hashed);
  }

  /**
   * List all users (id, email, role). For admin usage
   */
  static async listAll() {
    const result = await pool.query('SELECT id, email, role FROM users');
    return result.rows;
  }

  /**
   * Update user role, return updated user row or null if not found.
   */
  static async updateRole(userId, newRole) {
    const result = await pool.query(
      'UPDATE users SET role = $1 WHERE id = $2 RETURNING id, email, role',
      [newRole, userId]
    );
    if (result.rows.length === 0) return null;
    return result.rows[0];
  }

  /**
   * Delete a user, return deleted user row or null if not found.
   */
  static async deleteUser(userId) {
    const result = await pool.query('DELETE FROM users WHERE id = $1 RETURNING *', [userId]);
    if (result.rows.length === 0) return null;
    return result.rows[0];
  }
}


===== ./server/services/SessionService.js =====

// server/services/SessionService.js
import { WebSocket } from 'ws';

/**
 * In-memory session storage.
 */
const sessionMap = new Map();

/**
 * Each session object:
 * {
 *   code, 
 *   projectName, 
 *   elements, 
 *   linkedProjectId,
 *   users: Map(userId -> userObj),
 *   ephemeralRoles: Map(dbUid -> { isEditor?: bool}),
 *   nextJoinOrder: number
 * }
 */

export class SessionService {

  static getSession(code) {
    return sessionMap.get(code) || null;
  }

  static getOrCreateSession(code) {
    let session = sessionMap.get(code);
    if (!session) {
      session = {
        code,
        projectName: "New Project",
        elements: [
          { id: 1, x: 100, y: 100, w: 50, h: 50, lockedBy: null },
          { id: 2, x: 300, y: 200, w: 60, h: 80, lockedBy: null },
        ],
        linkedProjectId: null,
        users: new Map(),
        ephemeralRoles: new Map(),
        nextJoinOrder: 1,
      };
      sessionMap.set(code, session);
    }
    return session;
  }

  static removeSession(code) {
    sessionMap.delete(code);
  }

  /**
   * Creates a stable color from the userId, used for ephemeral user color assignment.
   */
  static colorFromUserId(userId) {
    let hash = 0;
    for (let i = 0; i < userId.length; i++) {
      hash = userId.charCodeAt(i) + ((hash << 5) - hash);
    }
    const r = (hash >> 16) & 0xff;
    const g = (hash >> 8) & 0xff;
    const b = hash & 0xff;
    return `rgb(${r},${g},${b})`;
  }

  /**
   * Returns true if userId is in the session and isOwner or isAdmin.
   */
  static canManage(session, userId) {
    const user = session.users.get(userId);
    if (!user) return false;
    return user.isOwner || user.isAdmin;
  }

  /**
   * Sets (or unsets) a user's ephemeral "editor" role within the session.
   */
  static setEditorRole(session, targetUserId, isEditor) {
    const tgtUser = session.users.get(targetUserId);
    if (!tgtUser) return false;

    tgtUser.isEditor = isEditor;

    const dbUid = this.getDbUserId(targetUserId);
    if (dbUid) {
      const ex = session.ephemeralRoles.get(dbUid) || {};
      ex.isEditor = isEditor;
      session.ephemeralRoles.set(dbUid, ex);
    }
    return true;
  }

  /**
   * Add or update a user in the session.
   */
  static joinSession(session, userId, userName, userRole, wsSocket) {
    let userObj = session.users.get(userId);
    if (!userObj) {
      userObj = {
        userId,
        name: userName || "Anonymous",
        color: this.colorFromUserId(userId),
        isOwner: false,
        isEditor: false,
        isAdmin: false,
        socket: wsSocket,
        x: 0,
        y: 0,
        joinOrder: session.nextJoinOrder++,
      };
      session.users.set(userId, userObj);

      // If no owners, assign the first joiner
      const anyOwner = [...session.users.values()].some(u => u.isOwner);
      if (!anyOwner) {
        userObj.isOwner = true;
      }
    } else {
      // If rejoining
      userObj.socket = wsSocket;
      userObj.name = userName || userObj.name;
    }

    if (userRole === "admin") {
      userObj.isAdmin = true;
    }

    const dbUid = this.getDbUserId(userId);
    if (dbUid) {
      const stored = session.ephemeralRoles.get(dbUid);
      if (stored) {
        userObj.isEditor = !!stored.isEditor;
      }
    }
    return userObj;
  }

  /**
   * Upgrade from oldUserId => newUserId, carrying ephemeral roles and locks.
   */
  static upgradeUserId(session, oldUserId, newUserId, newName, newIsAdmin, wsSocket) {
    const oldUser = session.users.get(oldUserId);
    if (!oldUser) return null;

    // Transfer any locked elements
    for (const el of session.elements) {
      if (el.lockedBy === oldUserId) {
        el.lockedBy = newUserId;
      }
    }

    session.users.delete(oldUserId);

    oldUser.userId = newUserId;
    oldUser.name = newName;
    oldUser.isAdmin = !!newIsAdmin;
    if (wsSocket) {
      oldUser.socket = wsSocket;
    }

    // Re-apply ephemeral editor role if it existed
    const dbUid = this.getDbUserId(newUserId);
    if (dbUid) {
      let stored = session.ephemeralRoles.get(dbUid) || {};
      if (typeof stored.isEditor === 'boolean') {
        oldUser.isEditor = stored.isEditor;
      }
      stored.isEditor = oldUser.isEditor;
      session.ephemeralRoles.set(dbUid, stored);
    }

    session.users.set(newUserId, oldUser);
    return oldUser;
  }

  /**
   * Downgrade from user_### => anon_###.
   */
  static downgradeUserId(session, oldUserId, newUserId, wsSocket) {
    const oldUser = session.users.get(oldUserId);
    if (!oldUser) return null;

    // Transfer any locked elements
    for (const el of session.elements) {
      if (el.lockedBy === oldUserId) {
        el.lockedBy = newUserId;
      }
    }

    const wasOwner = oldUser.isOwner;
    const wasEditor = oldUser.isEditor;

    // Save ephemeral roles for that DB user ID
    const dbUid = this.getDbUserId(oldUserId);
    if (dbUid) {
      const ex = session.ephemeralRoles.get(dbUid) || {};
      ex.isEditor = wasEditor;
      session.ephemeralRoles.set(dbUid, ex);
    }

    session.users.delete(oldUserId);

    oldUser.userId = newUserId;
    oldUser.name = "Anonymous";
    oldUser.isAdmin = false;
    oldUser.isEditor = false;
    oldUser.isOwner = false;
    if (wsSocket) {
      oldUser.socket = wsSocket;
    }

    session.users.set(newUserId, oldUser);
    if (wasOwner) {
      this.reassignOwnerIfNeeded(session);
    }
    return oldUser;
  }

  /**
   * Remove a user from the session. Release locks, reassign owner if needed.
   */
  static removeUser(session, userId) {
    const user = session.users.get(userId);
    if (!user) return null;

    for (const el of session.elements) {
      if (el.lockedBy === userId) {
        el.lockedBy = null;
      }
    }

    const wasOwner = user.isOwner;
    session.users.delete(userId);

    if (wasOwner) {
      this.reassignOwnerIfNeeded(session);
    }
    return user;
  }

  /**
   * Kicks a user => forcibly remove them if kicker is admin/owner
   */
  static kickUser(session, kickerUserId, targetUserId) {
    const reqUser = session.users.get(kickerUserId);
    const tgtUser = session.users.get(targetUserId);
    if (!reqUser || !tgtUser) return null;

    // Only owner or admin can kick
    if (!reqUser.isOwner && !reqUser.isAdmin) return null;

    // Can't kick an owner or admin
    if (tgtUser.isAdmin || tgtUser.isOwner) return null;

    // Release locks
    for (const el of session.elements) {
      if (el.lockedBy === targetUserId) {
        el.lockedBy = null;
      }
    }
    session.users.delete(targetUserId);

    if (tgtUser.isOwner) {
      this.reassignOwnerIfNeeded(session);
    }

    return tgtUser; 
  }

  /**
   * If no owners remain, assign the earliest joined user as the new owner.
   */
  static reassignOwnerIfNeeded(session) {
    const owners = [...session.users.values()].filter(u => u.isOwner);
    if (owners.length > 0) return;

    const arr = [...session.users.values()];
    if (arr.length === 0) {
      // session is empty; do nothing
      return;
    }
    arr.sort((a, b) => a.joinOrder - b.joinOrder);
    arr[0].isOwner = true;
  }

  /**
   * If userId = "user_5", returns 5; else null.
   */
  static getDbUserId(userId) {
    if (userId.startsWith("user_")) {
      return parseInt(userId.split("_")[1], 10);
    }
    return null;
  }
}


===== ./server/services/AuthService.js =====

// server/services/AuthService.js
import jwt from 'jsonwebtoken';
import config from '../config.js';

/**
 * Centralizes all logic for creating and verifying JWTs,
 * plus transforms from user row -> token payload.
 */
export class AuthService {
  /**
   * Returns the payload object you want to store in the token.
   * For example, user ID, email, role, name, etc.
   */
  static userPayload(user) {
    return {
      id: user.id,
      email: user.email,
      role: user.role,
      name: user.name,
    };
  }

  /**
   * Create a JWT string from a given payload object.
   */
  static createToken(payload, expiresIn = '1h') {
    return jwt.sign(payload, config.JWT_SECRET, { expiresIn });
  }

  /**
   * Verify a JWT string. If invalid, this throws an error.
   * On success, returns the decoded payload.
   */
  static verifyToken(token) {
    return jwt.verify(token, config.JWT_SECRET);
  }
}


===== ./server/services/ProjectService.js =====

// server/services/ProjectService.js
import pool from '../database.js';
import { HttpError } from '../utils/HttpError.js';

export class ProjectService {
  /**
   * Return all projects owned by a user.
   */
  static async getProjectsByOwner(userId) {
    const result = await pool.query(
      "SELECT * FROM projects WHERE owner_id = $1",
      [userId]
    );
    return result.rows;
  }

  /**
   * Create a new project for a given owner.
   */
  static async createProject(ownerId, name, description) {
    const result = await pool.query(
      "INSERT INTO projects (name, description, owner_id) VALUES ($1, $2, $3) RETURNING *",
      [name, description, ownerId]
    );
    return result.rows[0];
  }

  /**
   * Return the project's owner ID, or null if project doesn't exist.
   */
  static async getProjectOwnerId(projectId) {
    const result = await pool.query(
      "SELECT owner_id FROM projects WHERE id = $1",
      [projectId]
    );
    if (result.rows.length === 0) {
      return null; // no such project
    }
    return result.rows[0].owner_id;
  }

  /**
   * Update project name/description by ID. Returns updated row or null if not found.
   */
  static async updateProject(projectId, name, description) {
    const result = await pool.query(
      "UPDATE projects SET name = $1, description = $2 WHERE id = $3 RETURNING *",
      [name, description, projectId]
    );
    return result.rows[0] || null;
  }

  /**
   * Delete a project by ID. Returns the deleted row or null if not found.
   */
  static async deleteProject(projectId) {
    const result = await pool.query(
      "DELETE FROM projects WHERE id = $1 RETURNING *",
      [projectId]
    );
    return result.rows[0] || null;
  }

  /**
   * If the user doesn’t have any project, create a default. Return the default or existing project.
   */
  static async createDefaultProjectIfNone(userId) {
    const existing = await pool.query(
      "SELECT * FROM projects WHERE owner_id = $1 ORDER BY id LIMIT 1",
      [userId]
    );
    if (existing.rows.length > 0) {
      return existing.rows[0];
    }
    // Otherwise create a new default
    const result = await pool.query(
      "INSERT INTO projects (name, description, owner_id) VALUES ($1, $2, $3) RETURNING *",
      ["My Default Project", "Auto-created for user", userId]
    );
    return result.rows[0];
  }

  /**
   * Return versions for a project, sorted descending by version_number.
   */
  static async listVersions(projectId) {
    const result = await pool.query(
      `SELECT id, version_number, created_at
       FROM project_versions
       WHERE project_id = $1
       ORDER BY version_number DESC`,
      [projectId]
    );
    return result.rows;
  }

  /**
   * Create a new version for the project, auto-incrementing version_number.
   */
  static async createVersion(projectId, projectData) {
    // find max version_number
    const maxVerResult = await pool.query(
      `SELECT COALESCE(MAX(version_number), 0) AS max_ver
       FROM project_versions
       WHERE project_id = $1`,
      [projectId]
    );
    const maxVer = maxVerResult.rows[0].max_ver || 0;
    const newVer = maxVer + 1;

    const insertResult = await pool.query(
      `INSERT INTO project_versions (project_id, version_number, project_data)
       VALUES ($1, $2, $3)
       RETURNING id, version_number, created_at`,
      [projectId, newVer, projectData || {}]
    );
    return insertResult.rows[0];
  }

  /**
   * Rollback to a specific version => create a new version row with the old data.
   */
  static async rollbackVersion(projectId, versionId) {
    // Load the old version
    const oldVersionResult = await pool.query(
      `SELECT id, version_number, project_data
       FROM project_versions
       WHERE project_id = $1
         AND id = $2`,
      [projectId, versionId]
    );
    if (oldVersionResult.rows.length === 0) {
      throw new HttpError("Version not found.", 404);
    }
    const oldData = oldVersionResult.rows[0].project_data;

    // Then create a brand-new version row representing the rollback
    const maxVerResult = await pool.query(
      `SELECT COALESCE(MAX(version_number), 0) AS max_ver
       FROM project_versions
       WHERE project_id = $1`,
      [projectId]
    );
    const maxVer = maxVerResult.rows[0].max_ver || 0;
    const newVer = maxVer + 1;

    const rollbackInsert = await pool.query(
      `INSERT INTO project_versions (project_id, version_number, project_data)
       VALUES ($1, $2, $3)
       RETURNING id, version_number, created_at`,
      [projectId, newVer, oldData]
    );

    return {
      message: "Project rolled back successfully",
      newVersion: rollbackInsert.rows[0],
    };
  }

  /**
   * Return true if the given user can edit the project (i.e., owns it or is admin).
   */
  static async userCanEditProject(projectId, user) {
    if (!user) return false;
    if (user.role === 'admin') return true;
    const ownerId = await this.getProjectOwnerId(projectId);
    if (!ownerId) return false;
    return ownerId === user.id;
  }
}


===== ./server/ws/messageDispatcher.js =====

// server/ws/messageDispatcher.js
import { MESSAGE_TYPES } from '../../shared/wsMessageTypes.js';
import { handleJoinSession, handleUpgradeUserId, handleDowngradeUserId } from './handlers/sessionHandlers.js';
import { handleCursorUpdate } from './handlers/cursorHandlers.js';
import { handleElementGrab, handleElementMove, handleElementRelease } from './handlers/elementHandlers.js';
import { handleMakeEditor, handleRemoveEditor, handleKickUser } from './handlers/permissionHandlers.js';
import { handleProjectNameChange } from './handlers/projectHandlers.js';

export function handleIncomingMessage(session, data, ws) {
  switch (data.type) {
    case MESSAGE_TYPES.JOIN_SESSION:
      handleJoinSession(session, data, ws);
      break;
    case MESSAGE_TYPES.UPGRADE_USER_ID:
      handleUpgradeUserId(session, data, ws);
      break;
    case MESSAGE_TYPES.DOWNGRADE_USER_ID:
      handleDowngradeUserId(session, data, ws);
      break;

    case MESSAGE_TYPES.CURSOR_UPDATE:
      handleCursorUpdate(session, data, ws);
      break;

    case MESSAGE_TYPES.ELEMENT_GRAB:
      handleElementGrab(session, data, ws);
      break;
    case MESSAGE_TYPES.ELEMENT_MOVE:
      handleElementMove(session, data, ws);
      break;
    case MESSAGE_TYPES.ELEMENT_RELEASE:
      handleElementRelease(session, data, ws);
      break;

    case MESSAGE_TYPES.MAKE_EDITOR:
      handleMakeEditor(session, data, ws);
      break;
    case MESSAGE_TYPES.REMOVE_EDITOR:
      handleRemoveEditor(session, data, ws);
      break;
    case MESSAGE_TYPES.KICK_USER:
      handleKickUser(session, data, ws);
      break;

    // NEW: Handle project name changes in the real-time session
    case MESSAGE_TYPES.PROJECT_NAME_CHANGE:
      handleProjectNameChange(session, data, ws);
      break;

    default:
      // unknown message type
      break;
  }
}


===== ./server/ws/collabUtils.js =====

/**
 * ./server/ws/collabUtils.js
 *
 * Shared utility functions used by multiple handlers.
 */
import { WebSocket } from 'ws';
import { MESSAGE_TYPES } from '../../shared/wsMessageTypes.js';

/**
 * Broadcast a data object (JSON) to all sockets in a given session.
 */
export function broadcastToSession(session, data) {
  const msg = JSON.stringify(data);
  for (const user of session.users.values()) {
    if (user.socket && user.socket.readyState === WebSocket.OPEN) {
      user.socket.send(msg);
    }
  }
}

/**
 * Broadcast the current element state (elements array + projectName) to all in the session.
 */
export function broadcastElementState(session) {
  broadcastToSession(session, {
    type: MESSAGE_TYPES.ELEMENT_STATE,
    elements: session.elements,
    projectName: session.projectName,
  });
}

/**
 * Broadcast the current user list, sorted by joinOrder, plus info about the current owner.
 */
export function broadcastUserList(session) {
  const sorted = [...session.users.values()].sort((a, b) => a.joinOrder - b.joinOrder);
  let currentOwnerId = null;
  const userList = sorted.map(u => {
    if (u.isOwner) currentOwnerId = u.userId;
    return {
      userId: u.userId,
      name: u.name,
      color: u.color,
      isOwner: !!u.isOwner,
      isEditor: !!u.isEditor,
      isAdmin: !!u.isAdmin,
    };
  });

  broadcastToSession(session, {
    type: MESSAGE_TYPES.SESSION_USERS,
    users: userList,
    ownerUserId: currentOwnerId,
  });
}


===== ./server/ws/collaboration.js =====

// server/ws/collaboration.js
import { WebSocket } from 'ws';
import { handleIncomingMessage } from './messageDispatcher.js';
import { SessionService } from '../services/SessionService.js';

export function handleWebSocketConnection(ws, wss) {
  ws.on('message', (raw) => {
    let data;
    try {
      data = JSON.parse(raw);
    } catch {
      // ignore parse errors
      return;
    }

    // fetch session if known
    const session = ws.sessionCode ? SessionService.getSession(ws.sessionCode) : null;
    handleIncomingMessage(session, data, ws);
  });

  ws.on('close', () => {
    const code = ws.sessionCode;
    const userId = ws.userId;
    if (!code || !userId) return;

    const session = SessionService.getSession(code);
    if (!session) return;

    SessionService.removeUser(session, userId);
    if (session.users.size === 0) {
      SessionService.removeSession(code);
    }
  });
}


===== ./server/ws/handlers/elementHandlers.js =====

/**
 * ./server/ws/handlers/elementHandlers.js
 *
 * Handles messages: ELEMENT_GRAB, ELEMENT_MOVE, ELEMENT_RELEASE
 */
import { broadcastElementState } from '../collabUtils.js';

export function handleElementGrab(session, data, ws) {
  if (!session) return;
  const { userId, elementId } = data;
  const el = session.elements.find(e => e.id === elementId);
  if (!el) return;

  // Lock if no lock or lockedBy me
  if (!el.lockedBy || el.lockedBy === userId) {
    el.lockedBy = userId;
    broadcastElementState(session);
  }
}

export function handleElementMove(session, data, ws) {
  if (!session) return;
  const { userId, elementId, x, y } = data;
  const el = session.elements.find(e => e.id === elementId);
  if (!el) return;

  // Only move if locked by me
  if (el.lockedBy === userId) {
    el.x = x;
    el.y = y;
    broadcastElementState(session);
  }
}

export function handleElementRelease(session, data, ws) {
  if (!session) return;
  const { userId, elementId } = data;
  const el = session.elements.find(e => e.id === elementId);
  if (!el) return;

  // Only release if locked by me
  if (el.lockedBy === userId) {
    el.lockedBy = null;
    broadcastElementState(session);
  }
}


===== ./server/ws/handlers/projectHandlers.js =====

// server/ws/handlers/projectHandlers.js
import { MESSAGE_TYPES } from '../../../shared/wsMessageTypes.js';
import { broadcastToSession, broadcastElementState } from '../collabUtils.js';

/**
 * handleProjectNameChange => only if the user isOwner or isAdmin.
 */
export function handleProjectNameChange(session, data, ws) {
  if (!session) return;

  const { userId, newName } = data;
  if (!newName || !userId) return;

  const user = session.users.get(userId);
  if (!user) return;

  // Only owner or admin can rename
  if (user.isOwner || user.isAdmin) {
    session.projectName = newName;

    // Notify everyone that the project name changed
    broadcastToSession(session, {
      type: MESSAGE_TYPES.PROJECT_NAME_CHANGE,
      newName,
    });

    // Optionally also re-broadcast the element state if desired
    // (some clients might want that to ensure consistent data)
    broadcastElementState(session);
  }
}


===== ./server/ws/handlers/permissionHandlers.js =====

// server/ws/handlers/permissionHandlers.js
import { broadcastUserList, broadcastElementState, broadcastToSession } from '../collabUtils.js';
import { MESSAGE_TYPES } from '../../../shared/wsMessageTypes.js';
import { WebSocket } from 'ws';
import { SessionService } from '../../services/SessionService.js';

export function handleMakeEditor(session, data, ws) {
  if (!session) return;
  const { userId, targetUserId } = data;

  // Only an owner or admin can manage ephemeral roles
  if (!SessionService.canManage(session, userId)) {
    return;
  }
  const tgtUser = session.users.get(targetUserId);
  if (!tgtUser) return;

  // Prevent toggling an owner/admin
  if (!tgtUser.isOwner && !tgtUser.isAdmin) {
    SessionService.setEditorRole(session, targetUserId, true);
    broadcastUserList(session);
  }
}

export function handleRemoveEditor(session, data, ws) {
  if (!session) return;
  const { userId, targetUserId } = data;

  if (!SessionService.canManage(session, userId)) {
    return;
  }
  const tgtUser = session.users.get(targetUserId);
  if (!tgtUser) return;

  if (tgtUser.isEditor) {
    SessionService.setEditorRole(session, targetUserId, false);
    broadcastUserList(session);
  }
}

/**
 * KICK_USER => forcibly remove them from the session
 */
export function handleKickUser(session, data, ws) {
  if (!session) return;
  const { userId, targetUserId } = data;

  const kickedUser = SessionService.kickUser(session, userId, targetUserId);
  if (!kickedUser) {
    // Means either not authorized or user is admin/owner => no action
    return;
  }

  // Now that they're removed, broadcast user changes
  broadcastUserList(session);
  broadcastElementState(session);

  // If the kicked user is still connected, notify them
  if (kickedUser.socket && kickedUser.socket.readyState === WebSocket.OPEN) {
    kickedUser.socket.send(JSON.stringify({ type: MESSAGE_TYPES.KICKED }), () => {
      setTimeout(() => kickedUser.socket.close(), 50);
    });
  } else {
    kickedUser.socket?.close();
  }
}


===== ./server/ws/handlers/cursorHandlers.js =====

/**
 * ./server/ws/handlers/cursorHandlers.js
 *
 * Handles messages for cursor updates.
 */
import { broadcastToSession } from '../collabUtils.js';
import { MESSAGE_TYPES } from '../../../shared/wsMessageTypes.js';

export function handleCursorUpdate(session, data, ws) {
  if (!session) return;
  const { userId, x, y } = data;

  const user = session.users.get(userId);
  if (!user) return;

  user.x = x;
  user.y = y;

  // Optionally, you can broadcast either single or aggregated updates.
  // The older code sometimes broadcasted CURSOR_UPDATES as a bulk object.
  // We'll do single for simplicity:
  broadcastToSession(session, {
    type: MESSAGE_TYPES.CURSOR_UPDATE,
    userId,
    x,
    y,
  });
}


===== ./server/ws/handlers/sessionHandlers.js =====

import { SessionService } from '../../services/SessionService.js';
import { broadcastUserList, broadcastElementState } from '../collabUtils.js';
import { MESSAGE_TYPES } from '../../../shared/wsMessageTypes.js';

/**
 * handleJoinSession
 *   - fetch or create session
 *   - add user to session
 *   - attach ws fields
 *   - broadcast
 */
export function handleJoinSession(session, data, ws) {
  let { userId, name, sessionCode, userRole } = data;
  if (!userId) return;

  if (!sessionCode) {
    sessionCode = "defaultSession";
  }

  // If no session, create or fetch
  if (!session) {
    session = SessionService.getOrCreateSession(sessionCode);
  }

  const userObj = SessionService.joinSession(session, userId, name, userRole, ws);
  ws.sessionCode = session.code;
  ws.userId = userId;

  // broadcast
  broadcastUserList(session);
  broadcastElementState(session);
}

export function handleUpgradeUserId(session, data, ws) {
  if (!session) return;
  const { oldUserId, newUserId, newName, newIsAdmin } = data;

  const userObj = SessionService.upgradeUserId(session, oldUserId, newUserId, newName, newIsAdmin, ws);
  if (!userObj) return;

  ws.userId = newUserId;
  broadcastUserList(session);
  broadcastElementState(session);
}

export function handleDowngradeUserId(session, data, ws) {
  if (!session) return;
  const { oldUserId, newUserId } = data;

  const userObj = SessionService.downgradeUserId(session, oldUserId, newUserId, ws);
  if (!userObj) return;

  ws.userId = newUserId;
  broadcastUserList(session);
  broadcastElementState(session);
}


===== ./shared/wsMessageTypes.js =====

// ./shared/wsMessageTypes.js
export const MESSAGE_TYPES = {
  JOIN_SESSION: 'join-session',
  CURSOR_UPDATE: 'cursor-update',
  CURSOR_UPDATES: 'cursor-updates',

  ELEMENT_GRAB: 'element-grab',
  ELEMENT_MOVE: 'element-move',
  ELEMENT_RELEASE: 'element-release',
  ELEMENT_STATE: 'element-state',

  PROJECT_NAME_CHANGE: 'project-name-change',
  SESSION_USERS: 'session-users',
  UPGRADE_USER_ID: 'upgrade-user-id',

  MAKE_EDITOR: 'make-editor',
  REMOVE_EDITOR: 'remove-editor',
  KICK_USER: 'kick-user',
  KICKED: 'kicked'
};


===== ./client/index.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0"
  />
  <title>Board Game Prototyping</title>
  <link rel="stylesheet" href="css/style.css" />
</head>
<body>
  <div id="app">
    <!-- TOP-LEFT: Project Info -->
    <div id="project-info">
      <span id="project-name" title="Click to edit project name">Test</span>
      <button id="open-project-manager" title="Manage Project">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          viewBox="0 0 16 16"
        >
          <path d="M3 3h10v10H3V3zm9 9V4H4v8h8z"/>
          <path d="M8 8.5l-4 2V6l4 2.5l4-2.5v4.5l-4-2z"/>
        </svg>
      </button>
    </div>

    <!-- TOP-RIGHT: Local user info -->
    <div id="user-info">
      <span id="user-name">Anonymous</span>
      <div id="user-circle">
        <span id="user-circle-text">?</span>
      </div>

      <!-- Login popover if not logged in -->
      <div id="login-dropdown" class="hidden">
        <form id="loginForm">
          <div class="login-row">
            <input type="email" id="loginEmail" placeholder="Email" required />
          </div>
          <div class="login-row">
            <input type="password" id="loginPassword" placeholder="Password" required />
          </div>
          <div class="login-actions">
            <a href="#" id="registerLink">Register</a>
            <button type="submit">Login</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Session users list (floated left) -->
    <ul id="session-users-list"></ul>

    <!-- REGISTER MODAL -->
    <div id="register-modal" class="hidden">
      <div class="modal-content">
        <h2>Register Account</h2>
        <div id="register-message" class="message"></div>
        <form id="registerForm">
          <label for="regName">Name</label>
          <input type="text" id="regName" required />

          <label for="regEmail">Email</label>
          <input type="email" id="regEmail" required />

          <label for="regPassword">Password</label>
          <input type="password" id="regPassword" required />

          <label for="regConfirm">Confirm Password</label>
          <input type="password" id="regConfirm" required />

          <div style="margin-top: 1em;">
            <button type="submit">Register</button>
            <button type="button" id="registerCancelBtn">Cancel</button>
          </div>
        </form>
      </div>
    </div>

    <!-- PROJECT MANAGEMENT MODAL -->
    <div id="project-manager-modal" class="hidden">
      <div class="modal-content">
        <h2>Project Management</h2>

        <div id="messageContainer"></div>

        <div class="versions-section">
          <h3>Versions</h3>
          <div class="versions-controls">
            <button id="loadVersionsBtn">Load Versions</button>
            <button id="saveNewVersionBtn">Save New Version</button>
          </div>
          <ul id="versionsList"></ul>
        </div>

        <div class="danger-section">
          <button id="deleteProjectBtn" class="danger">Delete Project</button>
        </div>

        <button id="close-project-manager">Close</button>
      </div>
    </div>

    <!-- MAIN CANVAS -->
    <canvas id="gameCanvas"></canvas>

    <!-- ZOOM CONTROLS -->
    <div id="zoom-controls">
      <button id="zoom-out">-</button>
      <span id="zoom-level">100%</span>
      <button id="zoom-in">+</button>
      <button id="frame-all">Frame</button>
    </div>
  </div>

  <!-- A single global popover for user actions, absolutely positioned -->
  <div id="user-action-popover" class="hidden"></div>

  <script type="module" src="js/app.js"></script>
</body>
</html>


===== ./client/css/style.css =====

/* Basic Reset */
html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

#app {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Canvas */
#gameCanvas {
  display: block;
  width: 100%;
  height: 100%;
  background-color: #222;
  cursor: default;
}
#gameCanvas.grabbing {
  cursor: grabbing;
  cursor: -webkit-grabbing;
}

/* Zoom Controls (bottom-right) */
#zoom-controls {
  position: absolute;
  bottom: 20px;
  right: 20px;
  background: rgba(0,0,0,0.7);
  padding: 8px;
  border-radius: 4px;
  color: #fff;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  z-index: 10;
}
#zoom-level {
  min-width: 48px;
  text-align: center;
}

/* Project Info (top-left) */
#project-info {
  position: absolute;
  top: 20px;
  left: 20px;
  background: rgba(0,0,0,0.7);
  color: #fff;
  padding: 4px 8px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  z-index: 10;
}
#project-name {
  font-weight: bold;
  cursor: pointer;
}
#open-project-manager {
  background: transparent;
  border: none;
  color: #fff;
  cursor: pointer;
  padding: 0;
}

/*
   Session users list, left side under project info
*/
#session-users-list {
  list-style: none;
  padding: 0;
  margin: 0;

  position: absolute;
  top: 70px; /* below #project-info */
  left: 20px;
  background: rgba(0,0,0,0.7);
  color: #fff;
  width: 180px;
  max-height: 140px;
  overflow-y: auto;
  border-radius: 4px;
  z-index: 10;
}
#session-users-list li {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 4px;
  border-bottom: 1px solid rgba(255,255,255,0.2);
  cursor: default;
}
#session-users-list li:last-child {
  border-bottom: none;
}
.session-user-circle {
  width: 16px;
  height: 16px;
  border-radius: 50%;
  flex-shrink: 0;
}

/* hidden class to hide it by default */
.hidden {
  display: none !important;
}

/* arrow pointing left from the popover */
#user-action-popover {
  position: absolute;
  background: rgba(0,0,0,0.9);
  color: #fff;
  padding: 8px 10px;
  border-radius: 4px;
  z-index: 9999;
}

#user-action-popover::before {
  content: "";
  position: absolute;
  left: -6px;
  top: 50%;
  transform: translateY(-50%);
  border-top: 6px solid transparent;
  border-bottom: 6px solid transparent;
  border-right: 6px solid rgba(0,0,0,0.9);
}


/* each action is text-based, highlight on hover */
.user-action-item {
  font-size: 0.85em;
  padding: 2px 0;
  cursor: pointer;
}
.user-action-item:hover {
  background: rgba(255,255,255,0.1);
}

/*
   Top-right local user row
*/
#user-info {
  position: absolute;
  top: 20px;
  right: 20px;
  background: rgba(0,0,0,0.7);
  color: #fff;
  padding: 4px 8px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 8px;
  z-index: 10;
}
#user-name {
  font-weight: bold;
}
#user-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #888;
  color: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
}
#user-circle-text {
  font-weight: bold;
}

/* Login dropdown */
#login-dropdown {
  position: absolute;
  top: 48px;
  right: 0;
  background: rgba(0,0,0,0.9);
  padding: 8px;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  min-width: 200px;
}
#login-dropdown.hidden {
  display: none;
}
.login-row {
  margin-bottom: 4px;
}
.login-row input {
  width: 100%;
  padding: 4px;
  box-sizing: border-box;
}
.login-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.login-actions a {
  color: #66f;
  text-decoration: none;
  font-size: 0.9em;
}
.login-actions button {
  padding: 4px 8px;
}

/* Register modal => top z-index */
#register-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}
#register-modal.hidden {
  display: none;
}
#register-modal .modal-content {
  background: #fff;
  color: #000;
  padding: 20px;
  border-radius: 8px;
  min-width: 300px;
  max-height: 90vh;
  overflow-y: auto;
}

/* Project Management modal => also high z-index */
#project-manager-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}
#project-manager-modal.hidden {
  display: none;
}
#project-manager-modal .modal-content {
  background: #fff;
  color: #000;
  padding: 20px;
  border-radius: 8px;
  min-width: 400px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: border-box;
}
.versions-section {
  margin-bottom: 1em;
}
.versions-controls {
  margin-bottom: 0.5em;
  display: flex;
  gap: 8px;
}
#versionsList {
  margin: 0;
  padding: 0;
  list-style: none;
}
#versionsList li {
  margin: 4px 0;
  display: flex;
  align-items: center;
  gap: 8px;
}
.danger-section {
  margin: 1em 0;
}
button.danger {
  background-color: #e10;
  color: #fff;
  border: none;
  padding: 8px 12px;
  cursor: pointer;
  border-radius: 4px;
}
#messageContainer {
  margin-bottom: 0.5em;
  min-height: 20px;
  font-weight: bold;
}

/* Example marquee selection rectangle in the canvas */
.selection-rectangle {
  position: absolute;
  border: 2px solid blue;
  background: rgba(0,0,255,0.2);
  pointer-events: none;
  z-index: 9999;
}


===== ./client/js/canvas.js =====

/**
 * ./client/js/canvas.js
 *
 * Key change:
 *  - We export an "updateCanvasUserId(newId)" function so that 
 *    after logging in or out, the app can tell the canvas to use the new user ID 
 *    for future element grabbing/moving/releasing. 
 *
 * That fixes "can't deselect" after login.
 */

import { MESSAGE_TYPES } from "/shared/wsMessageTypes.js";

export const userInfoMap = new Map(); // userId -> { color, name }
const remoteCursors = new Map();

let localUserId = null;
let elements = [];
let currentProjectName = "New Project";

// Camera / Zoom
let camX = 0;
let camY = 0;
let scale = 1.0;
const minScale = 0.01;
const maxScale = 16.0;
const wheelZoomSpeed = 0.0015;
const buttonZoomStep = 0.25;

// Panning
let isPanning = false;
let lastMouseX = 0;
let lastMouseY = 0;

// Selection & dragging
let selectedElementIds = [];
let lockedOffsets = {};
let isDragging = false;

// Marquee selection
let isMarqueeSelecting = false;
let marqueeStartCanvasX = 0;
let marqueeStartCanvasY = 0;
let marqueeEndCanvasX = 0;
let marqueeEndCanvasY = 0;
let marqueeStartWorldX = 0;
let marqueeStartWorldY = 0;
let marqueeEndWorldX = 0;
let marqueeEndWorldY = 0;

// Base grid spacing
const BASE_SPACING = 100;

/**
 * Exported so app.js can tell the canvas code 
 * "Hey, we changed from oldUserId => newUserId" after login/out.
 */
export function updateCanvasUserId(newId) {
  localUserId = newId;
}

/**
 * Called once on page load. We store userId in a local var 
 * that we can update later with updateCanvasUserId().
 */
export function initCanvas(initialUserId) {
  localUserId = initialUserId;

  const canvas = document.getElementById("gameCanvas");
  const ctx2d = canvas.getContext("2d");

  function resize() {
    const cssWidth = canvas.clientWidth;
    const cssHeight = canvas.clientHeight;
    canvas.width = cssWidth * window.devicePixelRatio;
    canvas.height = cssHeight * window.devicePixelRatio;
    ctx2d.setTransform(devicePixelRatio, 0, 0, devicePixelRatio, 0, 0);
  }
  window.addEventListener("resize", resize);
  resize();

  // Mouse events
  canvas.addEventListener("mousedown", onMouseDown);
  canvas.addEventListener("mousemove", onMouseMove);
  canvas.addEventListener("mouseup", onMouseUp);
  canvas.addEventListener("mouseleave", onMouseUp);

  // Wheel zoom
  canvas.addEventListener("wheel", onWheel, { passive: false });

  // Zoom UI
  document.getElementById("zoom-in").addEventListener("click", () => {
    zoomAroundCenter(buttonZoomStep);
  });
  document.getElementById("zoom-out").addEventListener("click", () => {
    zoomAroundCenter(-buttonZoomStep);
  });
  document.getElementById("frame-all").addEventListener("click", frameAllElements);

  // ESC => clear selection
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      updateSelection([]);
    }
  });

  requestAnimationFrame(render);
}

/** Handle messages that update elements or cursors. */
export function handleCanvasMessage(data, myUserId) {
  switch (data.type) {
    case MESSAGE_TYPES.ELEMENT_STATE: {
      elements = data.elements || [];
      if (data.projectName) {
        currentProjectName = data.projectName;
      }
      // Keep selection only if still locked by me or unlocked
      selectedElementIds = selectedElementIds.filter((id) => {
        const el = elements.find((e) => e.id === id);
        if (!el) return false;
        return !el.lockedBy || el.lockedBy === myUserId;
      });
      // If we were dragging but lost lock, stop
      for (const id of selectedElementIds) {
        const el = elements.find(e => e.id === id);
        if (!el || el.lockedBy !== myUserId) {
          isDragging = false;
          break;
        }
      }
      break;
    }

    case MESSAGE_TYPES.CURSOR_UPDATES: {
      // Bulk update
      for (const [uId, pos] of Object.entries(data.cursors)) {
        remoteCursors.set(uId, pos);
      }
      // remove old
      for (const oldId of remoteCursors.keys()) {
        if (!data.cursors[oldId]) {
          remoteCursors.delete(oldId);
        }
      }
      break;
    }

    case "cursor-update": {
      // single
      if (data.userId !== myUserId) {
        remoteCursors.set(data.userId, { x: data.x, y: data.y });
      }
      break;
    }

    case MESSAGE_TYPES.PROJECT_NAME_CHANGE: {
      currentProjectName = data.newName;
      break;
    }

    default:
      break;
  }
}

/** Called if the server updates a user's color or name. */
export function handleUserColorUpdate(userId, name, color) {
  userInfoMap.set(userId, { color, name });
}

/** Called if we get an updated project name from the server. */
export function setProjectNameFromServer(newName) {
  currentProjectName = newName;
}

/* ------------------------------------------------------------------
   MOUSE EVENTS
------------------------------------------------------------------ */
function onMouseDown(e) {
  const canvas = e.currentTarget;
  if (e.button === 1 || e.button === 2) {
    // Middle or right => panning
    isPanning = true;
    lastMouseX = e.clientX;
    lastMouseY = e.clientY;
    canvas.classList.add("grabbing");
    return;
  }
  if (e.button === 0) {
    const rect = canvas.getBoundingClientRect();
    const screenX = e.clientX - rect.left;
    const screenY = e.clientY - rect.top;
    const wx = camX + screenX / scale;
    const wy = camY + screenY / scale;

    marqueeStartCanvasX = screenX * devicePixelRatio;
    marqueeStartCanvasY = screenY * devicePixelRatio;
    marqueeEndCanvasX = marqueeStartCanvasX;
    marqueeEndCanvasY = marqueeStartCanvasY;
    marqueeStartWorldX = wx;
    marqueeStartWorldY = wy;
    marqueeEndWorldX = wx;
    marqueeEndWorldY = wy;

    // check if an element was clicked
    const clicked = findElementAt(wx, wy);
    if (clicked) {
      // if locked by someone else => skip
      if (clicked.lockedBy && clicked.lockedBy !== localUserId) {
        return;
      }
      const alreadySelected = selectedElementIds.includes(clicked.id);
      if (alreadySelected) {
        // Start dragging
        isDragging = true;
        for (const id of selectedElementIds) {
          const el = elements.find(ele => ele.id === id);
          if (el && el.lockedBy === localUserId) {
            lockedOffsets[id] = {
              dx: wx - el.x,
              dy: wy - el.y,
            };
          }
        }
        canvas.classList.add("grabbing");
      } else {
        // shift or single select
        if (!e.shiftKey) {
          updateSelection([]);
        }
        const newSet = [...selectedElementIds];
        if (!newSet.includes(clicked.id)) {
          newSet.push(clicked.id);
        } else if (e.shiftKey) {
          const idx = newSet.indexOf(clicked.id);
          newSet.splice(idx, 1);
        }
        updateSelection(newSet);
        isDragging = false;
        canvas.classList.add("grabbing");
      }
    } else {
      // start marquee
      isMarqueeSelecting = true;
      if (!e.shiftKey) {
        updateSelection([]);
      }
      isDragging = false;
      canvas.classList.add("grabbing");
    }
  }
}

function onMouseMove(e) {
  const canvas = e.currentTarget;
  if (isPanning) {
    const dx = e.clientX - lastMouseX;
    const dy = e.clientY - lastMouseY;
    camX -= dx / scale;
    camY -= dy / scale;
    lastMouseX = e.clientX;
    lastMouseY = e.clientY;
  }

  if (isDragging) {
    const rect = canvas.getBoundingClientRect();
    const sx = e.clientX - rect.left;
    const sy = e.clientY - rect.top;
    const wx = camX + sx / scale;
    const wy = camY + sy / scale;

    for (const id of selectedElementIds) {
      const el = elements.find(ele => ele.id === id);
      if (el && el.lockedBy === localUserId) {
        const off = lockedOffsets[id];
        if (off) {
          sendMoveElement(id, wx - off.dx, wy - off.dy);
        }
      }
    }
  }

  if (isMarqueeSelecting) {
    const rect = canvas.getBoundingClientRect();
    marqueeEndCanvasX = (e.clientX - rect.left) * devicePixelRatio;
    marqueeEndCanvasY = (e.clientY - rect.top) * devicePixelRatio;

    const sx = e.clientX - rect.left;
    const sy = e.clientY - rect.top;
    marqueeEndWorldX = camX + sx / scale;
    marqueeEndWorldY = camY + sy / scale;
  }

  // Also send cursor updates
  const rect = canvas.getBoundingClientRect();
  const scrX = e.clientX - rect.left;
  const scrY = e.clientY - rect.top;
  const wx = camX + scrX / scale;
  const wy = camY + scrY / scale;
  sendCursorUpdate(localUserId, wx, wy);
}

function onMouseUp(e) {
  const canvas = e.currentTarget;
  if ((e.button === 1 || e.button === 2) && isPanning) {
    isPanning = false;
    canvas.classList.remove("grabbing");
    return;
  }
  if (e.button === 0 && isDragging) {
    isDragging = false;
    canvas.classList.remove("grabbing");
    return;
  }
  if (isMarqueeSelecting && e.button === 0) {
    isMarqueeSelecting = false;
    canvas.classList.remove("grabbing");

    // evaluate marquee
    const rminX = Math.min(marqueeStartWorldX, marqueeEndWorldX);
    const rmaxX = Math.max(marqueeStartWorldX, marqueeEndWorldX);
    const rminY = Math.min(marqueeStartWorldY, marqueeEndWorldY);
    const rmaxY = Math.max(marqueeStartWorldY, marqueeEndWorldY);

    const newlySelected = [];
    for (const el of elements) {
      if (boxesOverlap(rminX, rminY, rmaxX, rmaxY, el.x, el.y, el.x + el.w, el.y + el.h)) {
        if (!el.lockedBy || el.lockedBy === localUserId) {
          newlySelected.push(el.id);
        }
      }
    }
    const finalSel = [...selectedElementIds];
    for (const id of newlySelected) {
      if (!finalSel.includes(id)) {
        finalSel.push(id);
      }
    }
    updateSelection(finalSel);
  }
}

/** Deselect any removed elements, grab newly selected. */
function updateSelection(newSelectedIds) {
  // Release removed
  const removed = selectedElementIds.filter(id => !newSelectedIds.includes(id));
  removed.forEach(rid => sendReleaseElement(rid));

  // Grab added
  const added = newSelectedIds.filter(id => !selectedElementIds.includes(id));
  added.forEach(aid => sendGrabElement(aid));

  selectedElementIds = newSelectedIds;
  if (isDragging && !selectedElementIds.length) {
    isDragging = false;
  }
}

function boxesOverlap(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
  return !(ax2 < bx1 || ax1 > bx2 || ay2 < by1 || ay1 > by2);
}

/** Return the topmost element at (wx, wy). */
function findElementAt(wx, wy) {
  for (let i = elements.length - 1; i >= 0; i--) {
    const el = elements[i];
    if (wx >= el.x && wx <= el.x + el.w && wy >= el.y && wy <= el.y + el.h) {
      return el;
    }
  }
  return null;
}

/** Send ephemeral messages */
function sendGrabElement(elementId) {
  window.__sendWSMessage({
    type: MESSAGE_TYPES.ELEMENT_GRAB,
    userId: localUserId,
    elementId,
  });
}
function sendReleaseElement(elementId) {
  window.__sendWSMessage({
    type: MESSAGE_TYPES.ELEMENT_RELEASE,
    userId: localUserId,
    elementId,
  });
}
function sendMoveElement(elementId, x, y) {
  window.__sendWSMessage({
    type: MESSAGE_TYPES.ELEMENT_MOVE,
    userId: localUserId,
    elementId,
    x,
    y,
  });
}
function sendCursorUpdate(uId, wx, wy) {
  window.__sendWSMessage({
    type: MESSAGE_TYPES.CURSOR_UPDATE,
    userId: uId,
    x: wx,
    y: wy,
  });
}

/* ------------------------------------------------------------------
   ZOOM & FRAME
------------------------------------------------------------------ */
function onWheel(e) {
  e.preventDefault();
  const factor = Math.exp(-e.deltaY * wheelZoomSpeed);
  const canvas = e.currentTarget;
  const rect = canvas.getBoundingClientRect();
  const sx = e.clientX - rect.left;
  const sy = e.clientY - rect.top;
  zoomAroundPoint(scale * factor, sx, sy);
}

function zoomAroundCenter(step) {
  const canvas = document.getElementById("gameCanvas");
  const cw = canvas.clientWidth;
  const ch = canvas.clientHeight;
  zoomAroundPoint(scale + step, cw / 2, ch / 2);
}

function zoomAroundPoint(newScale, anchorX, anchorY) {
  const oldScale = scale;
  scale = Math.max(minScale, Math.min(maxScale, newScale));
  if (scale === oldScale) return;

  const wx = camX + anchorX / oldScale;
  const wy = camY + anchorY / oldScale;
  camX = wx - anchorX / scale;
  camY = wy - anchorY / scale;
  updateZoomUI();
}

function frameAllElements() {
  if (!elements.length) return;
  let minX = Infinity, maxX = -Infinity;
  let minY = Infinity, maxY = -Infinity;
  for (const el of elements) {
    minX = Math.min(minX, el.x);
    maxX = Math.max(maxX, el.x + el.w);
    minY = Math.min(minY, el.y);
    maxY = Math.max(maxY, el.y + el.h);
  }
  const w = maxX - minX;
  const h = maxY - minY;
  if (w <= 0 || h <= 0) return;

  const canvas = document.getElementById("gameCanvas");
  const cw = canvas.clientWidth;
  const ch = canvas.clientHeight;
  const margin = 50;
  const scaleX = (cw - margin * 2) / w;
  const scaleY = (ch - margin * 2) / h;
  const newScale = Math.max(minScale, Math.min(maxScale, Math.min(scaleX, scaleY)));
  scale = newScale;

  const cx = minX + w / 2;
  const cy = minY + h / 2;
  camX = cx - cw / (2 * scale);
  camY = cy - ch / (2 * scale);

  updateZoomUI();
}

function updateZoomUI() {
  const el = document.getElementById("zoom-level");
  if (el) {
    el.textContent = `${Math.round(scale * 100)}%`;
  }
}

/* ------------------------------------------------------------------
   RENDER LOOP
------------------------------------------------------------------ */
function render() {
  const canvas = document.getElementById("gameCanvas");
  const ctx = canvas.getContext("2d");

  // Clear
  ctx.save();
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();

  fillBackground(ctx);
  drawModularGrid(ctx);

  // Draw elements
  ctx.save();
  ctx.translate(-camX * scale, -camY * scale);
  ctx.scale(scale, scale);

  for (const el of elements) {
    ctx.fillStyle = "#CCC";
    ctx.fillRect(el.x, el.y, el.w, el.h);

    let outlineColor = null;
    if (selectedElementIds.includes(el.id)) {
      // locked by me => blue
      if (el.lockedBy === localUserId) {
        outlineColor = "blue";
      } else if (el.lockedBy) {
        // locked by someone else => their color
        const info = userInfoMap.get(el.lockedBy);
        outlineColor = info?.color || "#FFA500";
      } else {
        // not locked but selected => blue
        outlineColor = "blue";
      }
    } else if (el.lockedBy) {
      // locked by someone else => color
      const info = userInfoMap.get(el.lockedBy);
      outlineColor = info?.color || "#FFA500";
    }

    if (outlineColor) {
      ctx.strokeStyle = outlineColor;
      ctx.lineWidth = 2;
      ctx.strokeRect(el.x, el.y, el.w, el.h);
    }
  }
  ctx.restore();

  // Marquee
  if (isMarqueeSelecting) {
    drawMarquee(ctx);
  }

  // Remote cursors
  drawRemoteCursors(ctx);

  requestAnimationFrame(render);
}

function fillBackground(ctx) {
  ctx.save();
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.fillStyle = "#F0F0F0";
  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.restore();
}

function drawModularGrid(ctx) {
  ctx.save();
  ctx.translate(-camX * scale, -camY * scale);
  ctx.scale(scale, scale);

  const { majorSpacing, fraction } = getEffectiveMajorSpacing(scale);
  const cw = ctx.canvas.clientWidth / scale;
  const ch = ctx.canvas.clientHeight / scale;
  const startX = Math.floor(camX / majorSpacing) * majorSpacing;
  const endX = Math.ceil((camX + cw) / majorSpacing) * majorSpacing;
  const startY = Math.floor(camY / majorSpacing) * majorSpacing;
  const endY = Math.ceil((camY + ch) / majorSpacing) * majorSpacing;

  ctx.strokeStyle = "rgb(220,220,220)";
  ctx.lineWidth = 1 / scale;
  ctx.beginPath();

  for (let x = startX; x <= endX; x += majorSpacing) {
    ctx.moveTo(x, startY);
    ctx.lineTo(x, endY);
  }
  for (let y = startY; y <= endY; y += majorSpacing) {
    ctx.moveTo(startX, y);
    ctx.lineTo(endX, y);
  }
  ctx.stroke();

  if (fraction > 0) {
    ctx.strokeStyle = `rgba(230,230,230,${fraction})`;
    const subSpacing = majorSpacing / 4;
    ctx.beginPath();
    for (let x = startX; x <= endX; x += majorSpacing) {
      for (let i = 1; i < 4; i++) {
        const xx = x + i * subSpacing;
        ctx.moveTo(xx, startY);
        ctx.lineTo(xx, endY);
      }
    }
    for (let y = startY; y <= endY; y += majorSpacing) {
      for (let i = 1; i < 4; i++) {
        const yy = y + i * subSpacing;
        ctx.moveTo(startX, yy);
        ctx.lineTo(endX, yy);
      }
    }
    ctx.stroke();
  }
  ctx.restore();
}

function getEffectiveMajorSpacing(s) {
  const L4 = Math.log2(s) / 2;
  const iPart = Math.floor(L4);
  let frac = L4 - iPart;
  if (frac < 0) frac += 1;
  const majorSpacing = BASE_SPACING / Math.pow(4, iPart);
  return { majorSpacing, fraction: frac };
}

function drawMarquee(ctx) {
  const rx = Math.min(marqueeStartCanvasX, marqueeEndCanvasX);
  const ry = Math.min(marqueeStartCanvasY, marqueeEndCanvasY);
  const rw = Math.abs(marqueeEndCanvasX - marqueeStartCanvasX);
  const rh = Math.abs(marqueeEndCanvasY - marqueeStartCanvasY);

  ctx.save();
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.beginPath();
  ctx.rect(rx, ry, rw, rh);
  ctx.fillStyle = "rgba(0,0,255,0.2)";
  ctx.fill();
  ctx.strokeStyle = "blue";
  ctx.lineWidth = 1;
  ctx.stroke();
  ctx.restore();
}

function drawRemoteCursors(ctx) {
  ctx.save();
  for (const [uId, pos] of remoteCursors) {
    if (uId === localUserId) continue; // don't draw my own
    const sx = (pos.x - camX) * scale;
    const sy = (pos.y - camY) * scale;
    const info = userInfoMap.get(uId);
    const color = info?.color || "#FFA500";
    drawArrowCursor(ctx, sx, sy, color, uId);
  }
  ctx.restore();
}

function drawArrowCursor(ctx, sx, sy, outlineColor, label) {
  ctx.save();
  ctx.translate(sx, sy);

  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(0, 14);
  ctx.lineTo(4, 10);
  ctx.lineTo(6, 14);
  ctx.lineTo(8, 12);
  ctx.lineTo(5, 7);
  ctx.lineTo(9, 3);
  ctx.lineTo(0, 0);
  ctx.closePath();

  ctx.fillStyle = "white";
  ctx.fill();

  ctx.strokeStyle = outlineColor;
  ctx.lineWidth = 1;
  ctx.stroke();

  ctx.font = "6px sans-serif";
  ctx.fillStyle = "#000";
  ctx.fillText(label, 10, 5);

  ctx.restore();
}


===== ./client/js/app.js =====

/**
 * ./client/js/app.js
 *
 * Key changes:
 *  - After UPGRADE_USER_ID or DOWNGRADE_USER_ID, we update the canvas's localUserId
 *    so it sends future locks/releases with the correct user ID.
 *  - This preserves selection/deselection (fixes the bug where you couldn't deselect).
 *  - No changes to user list order or color on login/out, since the server is 
 *    now preserving that in the user object (joinOrder, color).
 */

import { MESSAGE_TYPES } from "../../shared/wsMessageTypes.js";
import {
  initCanvas,
  handleCanvasMessage,
  handleUserColorUpdate,
  setProjectNameFromServer,
  updateCanvasUserId, // NEW: function to update localUserId in canvas
} from "./canvas.js";

// Read saved login/session from localStorage
let token = localStorage.getItem("token") || "";
let currentUser = localStorage.getItem("user")
  ? JSON.parse(localStorage.getItem("user"))
  : null;

let activeUserId = localStorage.getItem("activeUserId");
if (!activeUserId) {
  activeUserId = "anon_" + Math.floor(Math.random() * 999999);
  localStorage.setItem("activeUserId", activeUserId);
}

const isLoggedIn = () => !!token && !!currentUser;
const isCurrentUserAdmin = () => currentUser && currentUser.role === "admin";

// We'll store the ephemeral session code in localStorage
let ephemeralSessionCode = localStorage.getItem("sessionCode") || "defaultSession";
let ephemeralOwnerId = null;
let sessionUsers = [];

// DOM references
const projectNameEl = document.getElementById("project-name");
const openPMBtn = document.getElementById("open-project-manager");
const pmModal = document.getElementById("project-manager-modal");
const closePMBtn = document.getElementById("close-project-manager");
const loadVersionsBtn = document.getElementById("loadVersionsBtn");
const saveNewVersionBtn = document.getElementById("saveNewVersionBtn");
const deleteProjectBtn = document.getElementById("deleteProjectBtn");
const messageContainer = document.getElementById("messageContainer");

const userInfoPanel = document.getElementById("user-info");
const userNameSpan = document.getElementById("user-name");
const userCircle = document.getElementById("user-circle");
const userCircleText = document.getElementById("user-circle-text");
const loginDropdown = document.getElementById("login-dropdown");
const loginForm = document.getElementById("loginForm");
const registerLink = document.getElementById("registerLink");
const sessionUsersList = document.getElementById("session-users-list");
const registerModal = document.getElementById("register-modal");
const registerForm = document.getElementById("registerForm");
const registerMessage = document.getElementById("register-message");
const registerCancelBtn = document.getElementById("registerCancelBtn");

const userActionPopover = document.getElementById("user-action-popover");
let openPopoverUserId = null;

// We'll store our WebSocket once connected
let ws = null;

/** Display a short message in the top-center "messageContainer". */
function showMessage(msg, isError = false) {
  messageContainer.textContent = msg;
  messageContainer.style.color = isError ? "red" : "green";
  setTimeout(() => {
    if (messageContainer.textContent === msg) {
      messageContainer.textContent = "";
    }
  }, 3000);
}

/** Send a JSON message over the WebSocket. */
function sendWSMessage(obj) {
  if (ws && ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify(obj));
  }
}
window.__sendWSMessage = sendWSMessage; // So canvas.js can call it, if needed

function connectWebSocket() {
  ws = new WebSocket("ws://localhost:3000");
  ws.onopen = () => {
    console.log("WebSocket connected.");
    doJoinSession(); // Join the ephemeral session once open
  };
  ws.onmessage = (evt) => {
    let data;
    try {
      data = JSON.parse(evt.data);
    } catch (err) {
      console.error("WS parse error:", err);
      return;
    }
    handleServerMessage(data);
  };
  ws.onclose = () => {
    console.log("WebSocket closed.");
  };
}

/** Process messages from server. */
function handleServerMessage(data) {
  switch (data.type) {
    case MESSAGE_TYPES.SESSION_USERS: {
      sessionUsers = data.users || [];
      ephemeralOwnerId = data.ownerUserId || null;
      renderSessionUsers();

      // Update color for remote cursors
      sessionUsers.forEach(u => {
        handleUserColorUpdate(u.userId, u.name, u.color);
      });
      // Update my local user circle if found
      const me = sessionUsers.find(u => u.userId === activeUserId);
      if (me) {
        userCircle.style.background = me.color;
        userCircleText.textContent = getInitial(me.name);
      }
      break;
    }

    case MESSAGE_TYPES.PROJECT_NAME_CHANGE: {
      const { newName } = data;
      currentProjectName = newName;
      restoreNameSpan();
      showMessage(`Renamed to: ${currentProjectName}`);
      setProjectNameFromServer(currentProjectName);
      break;
    }

    // Real-time collaboration data
    case MESSAGE_TYPES.ELEMENT_STATE:
    case MESSAGE_TYPES.CURSOR_UPDATES:
    case MESSAGE_TYPES.CURSOR_UPDATE:
      handleCanvasMessage(data, activeUserId);
      break;

    case MESSAGE_TYPES.KICKED:
      alert("You have been kicked from the session.");
      ws.close();
      break;

    default:
      console.log("Unknown message:", data.type, data);
  }
}

/** Attempt to join the session using the current userId and ephemeralSessionCode. */
function doJoinSession() {
  if (!ws || ws.readyState !== WebSocket.OPEN) return;

  const userName = currentUser ? currentUser.name : "Anonymous";
  let userRole = "";
  if (isCurrentUserAdmin()) {
    userRole = "admin";
  }

  sendWSMessage({
    type: MESSAGE_TYPES.JOIN_SESSION,
    userId: activeUserId,
    name: userName,
    sessionCode: ephemeralSessionCode,
    userRole,
  });
}

/** Quick helper to get first letter or '?'. */
function getInitial(str) {
  if (!str) return "?";
  return str.trim().charAt(0).toUpperCase();
}

/** Refresh top-right user panel display. */
function updateLocalUserUI() {
  let displayName = "Anonymous";
  if (currentUser?.name) {
    displayName = currentUser.name;
  }
  userNameSpan.textContent = displayName;
  userCircle.style.background = "#888";
  userCircleText.textContent = getInitial(displayName);
}

/* ------------------------------------------------------------------
   RENDER SESSION USERS
------------------------------------------------------------------ */
function renderSessionUsers() {
  sessionUsersList.innerHTML = "";
  sessionUsers.forEach(u => {
    const li = document.createElement("li");

    const circle = document.createElement("div");
    circle.classList.add("session-user-circle");
    circle.style.background = u.color;
    li.appendChild(circle);

    const labelSpan = document.createElement("span");
    labelSpan.textContent = u.name + " " + getRoleEmoji(u);

    if (canManageUser(u)) {
      labelSpan.classList.add("user-name-clickable");
      labelSpan.style.cursor = "pointer";
      labelSpan.addEventListener("click", (evt) => {
        evt.stopPropagation();
        onUserNameClicked(u, labelSpan);
      });
    }
    li.appendChild(labelSpan);

    sessionUsersList.appendChild(li);
  });
}

/** For ephemeral roles, show small emoji. */
function getRoleEmoji(u) {
  if (u.isAdmin) return "🪄";
  if (u.isOwner) return "🔑";
  if (u.isEditor) return "✏️";
  return "";
}

/** Whether we can manage that user (kick, editor toggles). */
function canManageUser(u) {
  const iAmOwner = (activeUserId === ephemeralOwnerId);
  const iAmAdmin = isCurrentUserAdmin();
  if (!iAmOwner && !iAmAdmin) return false;
  if (u.userId === activeUserId) return false;
  if (u.isAdmin && !iAmAdmin) return false;
  return true;
}

/** Clicking a user name => ephemeral role popover. */
function onUserNameClicked(u, labelElem) {
  if (openPopoverUserId === u.userId) {
    hideUserActionPopover();
    return;
  }
  openPopoverUserId = u.userId;
  buildAndPositionPopover(u, labelElem);
}

function buildAndPositionPopover(u, labelElem) {
  userActionPopover.innerHTML = "";
  userActionPopover.classList.remove("hidden");

  if (u.isEditor) {
    const removeEd = document.createElement("div");
    removeEd.classList.add("user-action-item");
    removeEd.textContent = "Remove Editor";
    removeEd.addEventListener("click", () => {
      sendWSMessage({
        type: MESSAGE_TYPES.REMOVE_EDITOR,
        userId: activeUserId,
        targetUserId: u.userId,
      });
      hideUserActionPopover();
    });
    userActionPopover.appendChild(removeEd);
  } else {
    const makeEd = document.createElement("div");
    makeEd.classList.add("user-action-item");
    makeEd.textContent = "Make Editor";
    makeEd.addEventListener("click", () => {
      sendWSMessage({
        type: MESSAGE_TYPES.MAKE_EDITOR,
        userId: activeUserId,
        targetUserId: u.userId,
      });
      hideUserActionPopover();
    });
    userActionPopover.appendChild(makeEd);
  }

  const kickItem = document.createElement("div");
  kickItem.classList.add("user-action-item");
  kickItem.textContent = "Kick User";
  kickItem.addEventListener("click", () => {
    sendWSMessage({
      type: MESSAGE_TYPES.KICK_USER,
      userId: activeUserId,
      targetUserId: u.userId,
    });
    hideUserActionPopover();
  });
  userActionPopover.appendChild(kickItem);

  userActionPopover.style.left = "-9999px";
  userActionPopover.style.top = "-9999px";

  requestAnimationFrame(() => {
    const popRect = userActionPopover.getBoundingClientRect();
    const popHeight = popRect.height;

    const userListRect = sessionUsersList.getBoundingClientRect();
    const labelRect = labelElem.getBoundingClientRect();
    const anchorMidY = (labelRect.top + labelRect.bottom) / 2;
    const offsetX = 10;

    const finalLeft = userListRect.right + offsetX;
    const finalTop = anchorMidY - popHeight / 2;

    userActionPopover.style.left = finalLeft + "px";
    userActionPopover.style.top = finalTop + "px";
  });
}

function hideUserActionPopover() {
  openPopoverUserId = null;
  userActionPopover.classList.add("hidden");
}

// Hide popover if clicking outside
document.addEventListener("click", (evt) => {
  if (
    openPopoverUserId &&
    !evt.target.closest("#user-action-popover") &&
    !evt.target.classList.contains("user-name-clickable")
  ) {
    hideUserActionPopover();
  }
});

/* ------------------------------------------------------------------
   LOGGING OUT => DOWNGRADE_USER_ID
------------------------------------------------------------------ */
function doLogout() {
  if (!currentUser) {
    // Already anonymous
    return;
  }
  const oldUserId = "user_" + currentUser.id;
  const newAnonId = "anon_" + Math.floor(Math.random() * 999999);

  sendWSMessage({
    type: MESSAGE_TYPES.DOWNGRADE_USER_ID,
    oldUserId,
    newUserId: newAnonId,
  });

  // Clear local login data
  token = "";
  currentUser = null;
  localStorage.removeItem("token");
  localStorage.removeItem("user");

  activeUserId = newAnonId;
  localStorage.setItem("activeUserId", newAnonId);

  // **Important**: update the canvas's local user ID so 
  // we continue to send future element-grab/release with the new ID.
  updateCanvasUserId(newAnonId);

  showMessage("You are now anonymous.");
  updateLocalUserUI();
}

/* ------------------------------------------------------------------
   TOP-RIGHT USER PANEL => LOG IN / LOG OUT
------------------------------------------------------------------ */
userInfoPanel.addEventListener("click", (evt) => {
  if (isLoggedIn()) {
    if (confirm("Log out?")) {
      doLogout();
    }
  } else {
    if (!loginDropdown.contains(evt.target)) {
      loginDropdown.classList.toggle("hidden");
    }
  }
});

// Hide login if clicking outside
document.addEventListener("click", (evt) => {
  if (
    !loginDropdown.classList.contains("hidden") &&
    !loginDropdown.contains(evt.target) &&
    !userInfoPanel.contains(evt.target)
  ) {
    loginDropdown.classList.add("hidden");
  }
});

/* ------------------------------------------------------------------
   LOGIN FORM => UPGRADE_USER_ID
------------------------------------------------------------------ */
loginForm.addEventListener("submit", (e) => {
  e.preventDefault();
  const email = document.getElementById("loginEmail").value.trim();
  const pass = document.getElementById("loginPassword").value;

  fetch("/auth/login", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password: pass }),
  })
    .then((res) => {
      if (!res.ok) {
        return res.json().then((obj) => {
          throw new Error(obj.message || "Login failed");
        });
      }
      return res.json(); // { message, user, token }
    })
    .then((data) => {
      token = data.token;
      currentUser = data.user;
      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(currentUser));

      const newUserId = "user_" + currentUser.id;
      const oldUserId = activeUserId;

      localStorage.setItem("activeUserId", newUserId);
      activeUserId = newUserId;

      // If we were anonymous, rename in place
      if (oldUserId.startsWith("anon_")) {
        sendWSMessage({
          type: MESSAGE_TYPES.UPGRADE_USER_ID,
          oldUserId,
          newUserId,
          newName: currentUser.name,
          newIsAdmin: (currentUser.role === "admin"),
        });
      }

      // Also update the canvas so it sends future lock messages as newUserId
      updateCanvasUserId(newUserId);

      showMessage("Logged in as " + currentUser.name);
      loginDropdown.classList.add("hidden");
      updateLocalUserUI();
    })
    .catch((err) => {
      showMessage(err.message, true);
    });
});

/* ------------------------------------------------------------------
   REGISTER => UPGRADE_USER_ID
------------------------------------------------------------------ */
registerLink.addEventListener("click", (e) => {
  e.preventDefault();
  loginDropdown.classList.add("hidden");
  registerModal.classList.remove("hidden");
});

registerForm.addEventListener("submit", (e) => {
  e.preventDefault();
  registerMessage.textContent = "";

  const name = document.getElementById("regName").value.trim();
  const email = document.getElementById("regEmail").value.trim();
  const password = document.getElementById("regPassword").value;
  const confirmPassword = document.getElementById("regConfirm").value;

  fetch("/auth/register", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ name, email, password, confirmPassword }),
  })
    .then((res) => {
      if (!res.ok) {
        return res.json().then((obj) => {
          throw new Error(obj.message || "Registration failed");
        });
      }
      return res.json(); // { message, user, token }
    })
    .then((data) => {
      token = data.token;
      currentUser = data.user;
      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(currentUser));

      const newId = "user_" + currentUser.id;
      const oldId = activeUserId;

      localStorage.setItem("activeUserId", newId);
      activeUserId = newId;

      if (oldId.startsWith("anon_")) {
        sendWSMessage({
          type: MESSAGE_TYPES.UPGRADE_USER_ID,
          oldUserId: oldId,
          newUserId: newId,
          newName: currentUser.name,
          newIsAdmin: (currentUser.role === "admin"),
        });
      }

      updateCanvasUserId(newId);

      registerMessage.textContent = "Registration successful!";
      registerMessage.style.color = "green";
      setTimeout(() => {
        registerModal.classList.add("hidden");
        showMessage("Logged in as " + currentUser.name);
        updateLocalUserUI();
      }, 1000);
    })
    .catch((err) => {
      registerMessage.textContent = err.message;
      registerMessage.style.color = "red";
    });
});

registerCancelBtn.addEventListener("click", () => {
  registerModal.classList.add("hidden");
});

/* ------------------------------------------------------------------
   PROJECT MANAGEMENT (basic ephemeral placeholders)
------------------------------------------------------------------ */
openPMBtn.addEventListener("click", () => {
  if (activeUserId !== ephemeralOwnerId && !isCurrentUserAdmin()) {
    showMessage("Must be owner or admin to open panel.", true);
    return;
  }
  pmModal.classList.remove("hidden");
});
closePMBtn.addEventListener("click", () => pmModal.classList.add("hidden"));

loadVersionsBtn.addEventListener("click", () => {
  showMessage("Version loading not implemented in ephemeral mode.", true);
});
saveNewVersionBtn.addEventListener("click", () => {
  if (!isLoggedIn()) {
    showMessage("You must log in to save a project version.", true);
    return;
  }
  showMessage("Saving ephemeral version not implemented.", true);
});
deleteProjectBtn.addEventListener("click", () => {
  showMessage("Delete ephemeral project not implemented.", true);
});

/* ------------------------------------------------------------------
   PROJECT NAME EDITING
------------------------------------------------------------------ */
projectNameEl.addEventListener("click", () => {
  startEditingProjectName();
});

function startEditingProjectName() {
  const input = document.createElement("input");
  input.type = "text";
  input.value = projectNameEl.textContent || "Untitled Project";
  input.id = "edit-project-name";
  projectNameEl.replaceWith(input);
  input.focus();

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      commitNameChange(input.value);
    } else if (e.key === "Escape") {
      revertNameChange();
    }
  });
  input.addEventListener("blur", () => {
    commitNameChange(input.value);
  });
}

function commitNameChange(newName) {
  if (!newName.trim()) {
    revertNameChange();
    return;
  }
  if (activeUserId !== ephemeralOwnerId && !isCurrentUserAdmin()) {
    showMessage("Only session owner or admin can rename.", true);
    revertNameChange();
    return;
  }
  sendWSMessage({
    type: MESSAGE_TYPES.PROJECT_NAME_CHANGE,
    userId: activeUserId,
    newName,
  });
  // The server broadcast will finalize the name
}

function revertNameChange() {
  restoreNameSpan();
}

function restoreNameSpan() {
  const oldInput = document.getElementById("edit-project-name");
  if (!oldInput) return;
  const span = document.createElement("span");
  span.id = "project-name";
  span.title = "Click to edit project name";
  span.textContent = currentProjectName;
  span.style.cursor = "pointer";
  oldInput.replaceWith(span);
  span.addEventListener("click", () => startEditingProjectName());
}

/* ------------------------------------------------------------------
   FINAL INIT
------------------------------------------------------------------ */
window.addEventListener("DOMContentLoaded", () => {
  document.addEventListener("contextmenu", (e) => e.preventDefault());
  connectWebSocket();
  initCanvas(activeUserId);   // Initialize the canvas with the current ID
  updateLocalUserUI();
});


===== ./db-init-scripts/init.sql =====

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'postgres') THEN
        CREATE ROLE postgres WITH SUPERUSER LOGIN PASSWORD 'postgrespassword';
    END IF;
END $$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'board_game_prototyping') THEN
        CREATE DATABASE board_game_prototyping OWNER postgres;
    END IF;
END $$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'admin') THEN
        CREATE ROLE admin WITH LOGIN PASSWORD 'test1234';
        ALTER ROLE admin CREATEDB;
    END IF;
END $$;

\c board_game_prototyping;

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(50) DEFAULT 'user'
);

-- Add a name column if it doesn't already exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name='users' 
          AND column_name='name'
    ) THEN
        ALTER TABLE users ADD COLUMN name VARCHAR(255) DEFAULT 'NoName';
    END IF;
END $$;

CREATE TABLE IF NOT EXISTS projects (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_sessions (
    sid VARCHAR NOT NULL PRIMARY KEY,
    sess JSON NOT NULL,
    expire TIMESTAMP(6) NOT NULL
);

CREATE TABLE IF NOT EXISTS project_versions (
    id SERIAL PRIMARY KEY,
    project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    version_number INTEGER NOT NULL,
    project_data JSONB NOT NULL DEFAULT '{}'::jsonb,
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_project_versions_pid_vnum
    ON project_versions (project_id, version_number);

-- Grant full access to admin user
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO admin;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO admin;
